1、io密集型：使用多线程（io操作不需要通过cpu,不会受到python中的cpu中的GIL锁限制）
 python GIL 全局锁
 解决多线程之间数据完整性和状态同步的最简单方法自然就是加锁。 于是有了GIL这把超级大锁，而当越来越多的代码库开发者接受了这种设定后，他们开始大量依赖这种特性（即默认python内部对象是thread-safe的，无需在实现时考虑额外的内存锁和同步操作）

2、计算密集型：使用多进程
3、爬虫性能相关
 -爬取模式
 -傻等
  response = requests.get(.....)
 -机智
  批量等待，回来就告诉我
  response = requests.get(.....)
  response = requests.get(.....)
  response = requests.get(.....)
 并发
 开始：
 角色：使用者 (7月28日 02 20:35)
  -多线程（多线程开多了，会有线程的上下文切换，会很耗时，降低效率）
  -多进程
  -协程（微线程，执行时来回切换）+异步IO =》1个线程发送N个HTTP请求
    -asyncio
 角色：开发者

 4、